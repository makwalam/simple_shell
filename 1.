#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(void) {
    char *line = NULL;  // Buffer to store user input
    size_t len = 0;     // Length of the allocated buffer

    while (1) {
        printf("#cisfun$ ");  // Display a shell prompt
        ssize_t read_size = getline(&line, &len, stdin);  // Read user input

        if (read_size == -1) {  // Handle Ctrl+D (EOF)
            printf("\n");
            break;  // Exit the loop when Ctrl+D is encountered
        }

        // Remove the newline character from the end
        if (line[read_size - 1] == '\n') {
            line[read_size - 1] = '\0';
        }

        pid_t pid = fork();  // Create a new process

        if (pid == -1) {  // Error handling for fork
            perror("fork");
            exit(EXIT_FAILURE);
        } else if (pid == 0) {  // Child process
            // Execute the command using execve
            if (execve(line, NULL, NULL) == -1) {
                perror(line);  // Print an error message with the command
                exit(EXIT_FAILURE);
            }
        } else {  // Parent process
            int status;
            waitpid(pid, &status, 0);  // Wait for the child to finish
        }
    }

    // Cleanup: Free allocated memory
    free(line);

    return 0;  // Exit the shell
}
