#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>

#define BUFFER_SIZE 1024

int main(void) {
    char buffer[BUFFER_SIZE];

    while (1) {
        printf("#cisfun$ "); // Display prompt
        fflush(stdout);

        if (fgets(buffer, BUFFER_SIZE, stdin) == NULL) { // Read user input
            printf("\n"); // Handle Ctrl+D (EOF)
            break;
        }

        // Remove the newline character from the end
        buffer[strcspn(buffer, "\n")] = '\0';

        char *args[BUFFER_SIZE];
        char *token = strtok(buffer, " "); // Tokenize the input

        int i = 0;
        while (token != NULL) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;

        // Check if the command exists in the PATH
        char *command = args[0];
        int found = 0;
        char *path = getenv("PATH");
        char *path_token = strtok(path, ":");

        char command_path[BUFFER_SIZE]; // Declare command_path here
        while (path_token != NULL) {
            snprintf(command_path, BUFFER_SIZE, "%s/%s", path_token, command);
            if (access(command_path, X_OK) == 0) {
                found = 1;
                break;
            }
            path_token = strtok(NULL, ":");
        }

        if (found) {
            pid_t pid = fork();

            if (pid == -1) {
                perror("fork");
                exit(EXIT_FAILURE);
            } else if (pid == 0) { // Child process
                // Execute the command using execv
                if (execv(command_path, args) == -1) {
                    perror(args[0]); // Print an error message with the command
                    exit(EXIT_FAILURE);
                }
            } else { // Parent process
                int status;
                waitpid(pid, &status, 0); // Wait for the child to finish
            }
        } else {
            printf("%s: command not found\n", command);
        }
    }

    return 0;
}
