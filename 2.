#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#define BUFFER_SIZE 1024

int main(void) {
    char buffer[BUFFER_SIZE];

    while (1) {
        printf("#cisfun$ "); // Display prompt
        fflush(stdout);

        if (fgets(buffer, BUFFER_SIZE, stdin) == NULL) { // Read user input
            printf("\n"); // Handle Ctrl+D (EOF)
            break;
        }

        // Remove the newline character from the end
        buffer[strcspn(buffer, "\n")] = '\0';

        char *args[BUFFER_SIZE];
        char *token = strtok(buffer, " "); // Tokenize the input

        int i = 0;
        while (token != NULL) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;

        pid_t pid = fork();

        if (pid == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        } else if (pid == 0) { // Child process
            // Execute the command using execvp
            if (execvp(args[0], args) == -1) {
                perror(args[0]); // Print an error message with the command
                exit(EXIT_FAILURE);
            }
        } else { // Parent process
            int status;
            waitpid(pid, &status, 0); // Wait for the child to finish
        }
    }

    return 0;
}
